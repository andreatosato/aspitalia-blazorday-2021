@page "/fetchdata"
@inject IStorageService _storage

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p> }
else
{
    <button class="btn btn-info" @onclick="async () => await CreateNewWeatherAsync()">New Weather</button>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn btn-danger" @onclick="async () => await DeleteAsync(forecast.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts { get; set; } = new List<WeatherForecast>();

    protected override async Task OnInitializedAsync()
    {
        //#if DEBUG
        //        await Task.Delay(10_000);
        //#endif
        forecasts = await _storage.GetWeathersAsync();
    }

    public async Task CreateNewWeatherAsync()
    {
        await _storage.CreateNewWeatherAsync();
        forecasts = await _storage.GetWeathersAsync();
        StateHasChanged();
    }

    public async Task DeleteAsync(Guid id)
    {
        await _storage.DeleteAsync(id);
        forecasts = await _storage.GetWeathersAsync();
        StateHasChanged();
    }
}
