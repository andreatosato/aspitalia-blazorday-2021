@page "/db-demo"
@inject ILiteDatabase _db;

<h1>LiteDB for Blazor WebAssembly</h1>

<button class="btn btn-primary" hidden="@(_db.IsOpen)" @onclick="OpenDatabase">Open</button>
<button class="btn btn-primary" hidden="@(!_db.IsOpen)" @onclick="CloseDatabase">Close</button>
<button class="btn btn-primary" hidden="@(!_db.IsOpen)" @onclick="InsertPerson">Insert</button>
<button class="btn btn-primary" hidden="@(!_db.IsOpen)" @onclick="() => BulkPerson(1000)">Bulk (1000)</button>
<button class="btn btn-primary" hidden="@(!_db.IsOpen)" @onclick="QueryCollection">Query All</button>
<button class="btn btn-primary" hidden="@(!_db.IsOpen)" @onclick="Checkpoint">Checkpoint</button>

<pre class="log">@_log.ToString()</pre>

@code {

    private readonly StringBuilder _log = new StringBuilder();
    private readonly Random _rnd = new Random();

    private ILiteCollection<Person> _personCollection;

    protected override void OnInitialized()
    {
        _personCollection = _db.GetCollection<Person>();
    }

    private async Task OpenDatabase()
    {
        await _db.OpenAsync();

        _log.AppendLine("database opened");
    }

    private async Task CloseDatabase()
    {
        await _db.DisposeAsync();

        _log.AppendLine("database closed (with checkpoint)");
    }

    private async Task InsertPerson()
    {
        var person = new Person
        {
            Name = "John Doe " + Guid.NewGuid(),
            Age = _rnd.Next(10, 90)
        };

        await _personCollection.InsertAsync(person);

        _log.AppendLine($"inserted new person: {person}");
    }

    private async Task BulkPerson(int qt)
    {
        var docs = Enumerable.Range(1, qt).Select(i => new Person
        {
            Name = "Bulk " + i,
            Age = _rnd.Next(10, 90)
        });

        var dt = Stopwatch.StartNew();

        await _personCollection.InsertAsync(docs);

        _log.AppendLine($"total inserted: {qt} in {dt.ElapsedMilliseconds}ms");
    }

    private async Task QueryCollection()
    {
        var results = _personCollection.Query()
            .Limit(10)
            .ToAsyncEnumerable();

        _log.AppendLine("query results (limit 10)");

        await foreach (var person in results)
        {
            _log.AppendLine($"  - {(person?.ToString() ?? "null")}");
        }
    }

    private async Task Checkpoint()
    {
        await _db.CheckpointAsync();

        _log.AppendLine("checkpoint");
    }

    class Person
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }

        public override string ToString() => BsonMapper.Global.ToDocument(this).ToString();
    }
}
